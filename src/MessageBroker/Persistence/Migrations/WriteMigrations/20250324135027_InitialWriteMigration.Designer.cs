// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace MessageBroker.Persistence.Migrations.WriteMigrations
{
    [DbContext(typeof(WriteContext))]
    [Migration("20250324135027_InitialWriteMigration")]
    partial class InitialWriteMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ClientApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("api_key");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("session_id");

                    b.ComplexProperty<Dictionary<string, object>>("EntityCreationStatus", "Domain.Entities.ClientApplication.EntityCreationStatus#EntityCreationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("created_by");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("created_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityDeletionStatus", "Domain.Entities.ClientApplication.EntityDeletionStatus#EntityDeletionStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("deleted_by");

                            b1.Property<DateTime?>("DeletedOnUtc")
                                .HasMaxLength(36)
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_on_utc");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit")
                                .HasColumnName("is_deleted");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityModificationStatus", "Domain.Entities.ClientApplication.EntityModificationStatus#EntityModificationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("modified_by");

                            b1.Property<DateTime?>("ModifiedOnUtc")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("modified_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("ConcurrencyStamp")
                        .IsUnique();

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("SYSTEM_CLIENT_APPLICATIONS", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SYSTEM_CLIENT_APPLICATIONSHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payload");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("topic_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("type");

                    b.ComplexProperty<Dictionary<string, object>>("EntityCreationStatus", "Domain.Entities.Event.EntityCreationStatus#EntityCreationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("created_by");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("created_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ConcurrencyStamp")
                        .IsUnique();

                    b.HasIndex("TopicId");

                    b.ToTable("SYSTEM_EVENTS", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SYSTEM_EVENTSHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Domain.Entities.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClientApplicationId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("client_application_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date_time");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("EntityCreationStatus", "Domain.Entities.Session.EntityCreationStatus#EntityCreationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("created_by");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("created_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityDeletionStatus", "Domain.Entities.Session.EntityDeletionStatus#EntityDeletionStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("deleted_by");

                            b1.Property<DateTime?>("DeletedOnUtc")
                                .HasMaxLength(36)
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_on_utc");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit")
                                .HasColumnName("is_deleted");
                        });

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_SESSIONS", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SYSTEM_SESSIONSHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClientApplicationId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("client_application_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("topic_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type");

                    b.ComplexProperty<Dictionary<string, object>>("EntityCreationStatus", "Domain.Entities.Subscription.EntityCreationStatus#EntityCreationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("created_by");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("created_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityDeletionStatus", "Domain.Entities.Subscription.EntityDeletionStatus#EntityDeletionStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("deleted_by");

                            b1.Property<DateTime?>("DeletedOnUtc")
                                .HasMaxLength(36)
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_on_utc");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit")
                                .HasColumnName("is_deleted");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityModificationStatus", "Domain.Entities.Subscription.EntityModificationStatus#EntityModificationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("modified_by");

                            b1.Property<DateTime?>("ModifiedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("modified_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ClientApplicationId");

                    b.HasIndex("ConcurrencyStamp")
                        .IsUnique();

                    b.HasIndex("TopicId");

                    b.ToTable("SYSTEM_SUBSCRIPTIONS", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SYSTEM_SUBSCRIPTIONSHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Domain.Entities.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status");

                    b.ComplexProperty<Dictionary<string, object>>("EntityCreationStatus", "Domain.Entities.Topic.EntityCreationStatus#EntityCreationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("created_by");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasColumnName("created_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityDeletionStatus", "Domain.Entities.Topic.EntityDeletionStatus#EntityDeletionStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("deleted_by");

                            b1.Property<DateTime?>("DeletedOnUtc")
                                .HasMaxLength(36)
                                .HasColumnType("datetime2")
                                .HasColumnName("deleted_on_utc");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit")
                                .HasColumnName("is_deleted");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("EntityModificationStatus", "Domain.Entities.Topic.EntityModificationStatus#EntityModificationStatus<string>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("modified_by");

                            b1.Property<DateTime?>("ModifiedOnUtc")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("datetime2")
                                .HasColumnName("modified_on_utc")
                                .HasDefaultValueSql("GETUTCDATE()");
                        });

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_TOPICS", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SYSTEM_TOPICSHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Domain.Entities.ClientApplication", b =>
                {
                    b.HasOne("Domain.Entities.Session", "Session")
                        .WithOne("ClientApplication")
                        .HasForeignKey("Domain.Entities.ClientApplication", "SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Topic", "Topic")
                        .WithMany("Events")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.ClientApplication", "ClientApplication")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Topic", "Topic")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientApplication");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Entities.ClientApplication", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.Session", b =>
                {
                    b.Navigation("ClientApplication")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Topic", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
