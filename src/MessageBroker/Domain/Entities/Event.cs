using Domain.Contracts;
using Domain.ValueObjects;

namespace Domain.Entities;

/// <summary>
/// Represents the default implementation of an <see cref="Event{Tkey}"/> entity.
/// </summary>
public sealed class Event : Event<string>
{
    /// <summary>
    /// The unique identifier for the event entity.
    /// A new GUID is generated by default, represented as a string.
    /// </summary>
    public override string Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// The identifier of the topic associated with this event.
    /// </summary>
    public string TopicId { get; set; } = default!;

    /// <summary>
    /// The topic associated with this event.
    /// </summary>
    public Topic Topic { get; set; } = default!;
}

/// <summary>
/// Represents the base class for an <see cref="Event"/> entity.
/// </summary>
/// <typeparam name="TKey">The type of the key used to identify the event entity.</typeparam>
public abstract class Event<TKey> : IEntityCreationStatus<TKey> 
    where TKey : IEquatable<TKey>
{
    /// <summary>
    /// The unique identifier for the event entity.
    /// </summary>
    public virtual TKey Id { get; set; } = default!;

    /// <summary>
    /// The type of the event.
    /// </summary>
    public virtual string Type { get; set; } = default!;

    /// <summary>
    /// The payload associated with the event.
    /// </summary>
    public virtual string Payload { get; set; } = default!;

    /// <summary>
    /// A random value that changes whenever the entity is persisted.
    /// Used to detect concurrency conflicts.
    /// </summary>
    public virtual string ConcurrencyStamp { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// The creation status of the event entity.
    /// </summary>
    public EntityCreationStatus<TKey> EntityCreationStatus { get; set; } = default!;
}